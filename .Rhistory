if (sud[row, col] != 0) {
backcol = grey(.85) # given
number = sud[row, col]
} else if (set[row, col] != 0) { # a guess
if (sol[row, col] == 0) {
grey(.65) # no solution yet
number = set[row, col]
} else if (sol[row, col] == set[row, col]) {
backcol = rgb(0, 1, 0) # correct guess - green
} else {
backcol = rgb(1, 0, 0) # wrong guess - red
}
} else if (sol[row, col] != 0) {
backcol = rgb(1, 1, 0) # not guessed - yellow
}
polygon(c(col-.5, col-.5, col+.5, col+.5),
c((10-row)-.5, (10-row)+.5, (10-row)+.5, (10-row)-.5), col=backcol)
if (number > 0) text(col, 10-row, number, offset=0)
}
# Add row and column numbers
for (i in 1:9) {
text(.25, 10-i, i, offset=0)
text(9.75, 10-i, i, offset=0)
text(i, .1, i, offset=0)
text(i, 9.9, i, offset=0)
}
# Plot thick lines
for (i in seq(.5,9.5,3)) {
lines(c(.5, 9.5), c(i, i), lwd=3)
lines(c(i, i), c(.5, 9.5), lwd=3)
}
}
shinyServer(function(input, output) {
# Use shared variables and side-effects, because the dependency graph is messy
setMatrix <- matrix(0, nrow=9, ncol=9)
solutionMatrix <- matrix(0, nrow=9, ncol=9)
sudokuMatrix <- matrix(0, nrow=9, ncol=9)
set <- reactive({
input$setButton
isolate({
setMatrix[as.integer(input$row), as.integer(input$col)] <<- as.integer(input$value)
})
})
restart <- reactive({
input$newButton
isolate({
sudokuMatrix <<- generateSudoku(input$blanks)
})
solutionMatrix <<- matrix(0, nrow=9, ncol=9)
setMatrix <<- matrix(0, nrow=9, ncol=9)
})
solve <- reactive({
input$solveButton
if (input$solveButton != 0) {
solutionMatrix <<- solveSudoku(sudokuMatrix, print.it=F)
}
})
output$table <- renderPlot({
# Replot after each action
set()
restart()
solve()
plotSudoku(solutionMatrix, setMatrix, sudokuMatrix)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(sudoku)
library(markdown)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
titlePanel("Sudoku"),
hr(),
sliderInput("blanks", label = "Number of Blanks",
min = 9, max = 60, value = 40),
actionButton("newButton", "New Puzzle"),
hr(),
selectInput("row", label = "Row",
choices = list(1,2,3,4,5,6,7,8,9),
selected = 5),
selectInput("col", label = "Column",
choices = list(1,2,3,4,5,6,7,8,9),
selected = 5),
selectInput("value", label = "Value",
choices = list(1,2,3,4,5,6,7,8,9," "=0),
selected = 0),
actionButton("setButton", "Set"),
hr(),
actionButton("solveButton", "Solve Puzzle")
),
mainPanel(
tabsetPanel(
tabPanel("Play", plotOutput("table")))
)
)
)
server <- function(input,output){
plotSudoku <- function(sol, set, sud) {
# Inspiration from
# http://www.econometricsbysimulation.com/2013/06/sudoku-automation-solver-challenge-r.html
plot(0:10, 0:10, type="n", axes=F, xlab="Column", ylab="Row")
for (row in 1:9) for (col in 1:9) {
backcol = grey(.95)
number = sol[row, col]
if (sud[row, col] != 0) {
backcol = grey(.85) # given
number = sud[row, col]
} else if (set[row, col] != 0) { # a guess
if (sol[row, col] == 0) {
grey(.65) # no solution yet
number = set[row, col]
} else if (sol[row, col] == set[row, col]) {
backcol = rgb(0, 1, 0) # correct guess - green
} else {
backcol = rgb(1, 0, 0) # wrong guess - red
}
} else if (sol[row, col] != 0) {
backcol = rgb(1, 1, 0) # not guessed - yellow
}
polygon(c(col-.5, col-.5, col+.5, col+.5),
c((10-row)-.5, (10-row)+.5, (10-row)+.5, (10-row)-.5), col=backcol)
if (number > 0) text(col, 10-row, number, offset=0)
}
# Add row and column numbers
for (i in 1:9) {
text(.25, 10-i, i, offset=0)
text(9.75, 10-i, i, offset=0)
text(i, .1, i, offset=0)
text(i, 9.9, i, offset=0)
}
# Plot thick lines
for (i in seq(.5,9.5,3)) {
lines(c(.5, 9.5), c(i, i), lwd=3)
lines(c(i, i), c(.5, 9.5), lwd=3)
}
}
shinyServer(function(input, output) {
# Use shared variables and side-effects, because the dependency graph is messy
setMatrix <- matrix(0, nrow=9, ncol=9)
solutionMatrix <- matrix(0, nrow=9, ncol=9)
sudokuMatrix <- matrix(0, nrow=9, ncol=9)
set <- reactive({
input$setButton
isolate({
setMatrix[as.integer(input$row), as.integer(input$col)] <<- as.integer(input$value)
})
})
restart <- reactive({
input$newButton
isolate({
sudokuMatrix <<- generateSudoku(input$blanks)
})
solutionMatrix <<- matrix(0, nrow=9, ncol=9)
setMatrix <<- matrix(0, nrow=9, ncol=9)
})
solve <- reactive({
input$solveButton
if (input$solveButton != 0) {
solutionMatrix <<- solveSudoku(sudokuMatrix, print.it=F)
}
})
output$table <- renderPlot({
# Replot after each action
set()
restart()
solve()
plotSudoku(solutionMatrix, setMatrix, sudokuMatrix)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(sudoku)
library(markdown)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
titlePanel("Sudoku"),
hr(),
sliderInput("blanks", label = "Number of Blanks",
min = 9, max = 60, value = 40),
actionButton("newButton", "New Puzzle"),
hr(),
selectInput("row", label = "Row",
choices = list(1,2,3,4,5,6,7,8,9),
selected = 5),
selectInput("col", label = "Column",
choices = list(1,2,3,4,5,6,7,8,9),
selected = 5),
selectInput("value", label = "Value",
choices = list(1,2,3,4,5,6,7,8,9," "=0),
selected = 0),
actionButton("setButton", "Set"),
hr(),
actionButton("solveButton", "Solve Puzzle")
),
mainPanel(
tabsetPanel(
tabPanel("Play", plotOutput("table")))
)
)
)
server <- function(input,output){
plotSudoku <- function(sol, set, sud) {
# Inspiration from
# http://www.econometricsbysimulation.com/2013/06/sudoku-automation-solver-challenge-r.html
plot(0:10, 0:10, type="n", axes=F, xlab="Column", ylab="Row")
for (row in 1:9) for (col in 1:9) {
backcol = grey(.95)
number = sol[row, col]
if (sud[row, col] != 0) {
backcol = grey(.85) # given
number = sud[row, col]
} else if (set[row, col] != 0) { # a guess
if (sol[row, col] == 0) {
grey(.65) # no solution yet
number = set[row, col]
} else if (sol[row, col] == set[row, col]) {
backcol = rgb(0, 1, 0) # correct guess - green
} else {
backcol = rgb(1, 0, 0) # wrong guess - red
}
} else if (sol[row, col] != 0) {
backcol = rgb(1, 1, 0) # not guessed - yellow
}
polygon(c(col-.5, col-.5, col+.5, col+.5),
c((10-row)-.5, (10-row)+.5, (10-row)+.5, (10-row)-.5), col=backcol)
if (number > 0) text(col, 10-row, number, offset=0)
}
# Add row and column numbers
for (i in 1:9) {
text(.25, 10-i, i, offset=0)
text(9.75, 10-i, i, offset=0)
text(i, .1, i, offset=0)
text(i, 9.9, i, offset=0)
}
# Plot thick lines
for (i in seq(.5,9.5,3)) {
lines(c(.5, 9.5), c(i, i), lwd=3)
lines(c(i, i), c(.5, 9.5), lwd=3)
}
}
# Use shared variables and side-effects, because the dependency graph is messy
setMatrix <- matrix(0, nrow=9, ncol=9)
solutionMatrix <- matrix(0, nrow=9, ncol=9)
sudokuMatrix <- matrix(0, nrow=9, ncol=9)
set <- reactive({
input$setButton
isolate({
setMatrix[as.integer(input$row), as.integer(input$col)] <<- as.integer(input$value)
})
})
restart <- reactive({
input$newButton
isolate({
sudokuMatrix <<- generateSudoku(input$blanks)
})
solutionMatrix <<- matrix(0, nrow=9, ncol=9)
setMatrix <<- matrix(0, nrow=9, ncol=9)
})
solve <- reactive({
input$solveButton
if (input$solveButton != 0) {
solutionMatrix <<- solveSudoku(sudokuMatrix, print.it=F)
}
})
output$table <- renderPlot({
# Replot after each action
set()
restart()
solve()
plotSudoku(solutionMatrix, setMatrix, sudokuMatrix)
})
}
shinyApp(ui = ui, server = server)
rm(list=list(all=TRUE))
rm(list=list(all=True))
rm(list=list())
list
list()
data <- matrix(nrow=9, ncol=9)
data.entry (data)
rm(list=ls())
data <- matrix(nrow=9, ncol=9)
data.entry (data)
library(shiny)
runUrl('http://math.utexas.edu/~cwhite/Sudoku_Solver.zip')
runUrl('http://math.utexas.edu/~cwhite/Sudoku_Solver.zip')
library(shiny)
runGitHub("NFL_app","moody-marlin")
?sweep
?svd
list(a=3, b=4)
rm(list=ls(all=TRUE))
setwd('~/Dropbox/Code/NFL_app/')
runApp()
library(shin)
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
R <- ranker('home_score', 2013, 1)
team_ids
length(team_ids)
game_data$h_ID[2]
year <- 2013
stat <- 'home_score'
game_data <- subset(boxscores, season_year %in% c(year) & season_type %in% c('Regular'))
A <- matrix(NA,length(team_ids),length(team_ids))
idx <- match(stat, names(map))
stat_idx <- match(map[idx], names(game_data))
idx
stat
map
names(map)
R <- ranker('Score',2013,1)
R$u
R$v
R$d
game_data <- subset(boxscores, season_year %in% c(year) & season_type %in% c('Regular'))
A <- matrix(NA,length(team_ids),length(team_ids))
idx <- match(stat, names(map))
stat_idx <- match(map[idx], names(game_data))
for(k in 1:nrow(game_data)){
A[game_data$h_ID[k],
game_data$a_ID[k]] <- game_data[k,stat_idx]
A[game_data$a_ID[k],
game_data$h_ID[k]] <- game_data[k,stat_idx+1]
}
R <- softImpute(A, rank.max=rank, maxit=1e3)
stat <- 'Score'
game_data <- subset(boxscores, season_year %in% c(year) & season_type %in% c('Regular'))
A <- matrix(NA,length(team_ids),length(team_ids))
idx <- match(stat, names(map))
stat_idx <- match(map[idx], names(game_data))
for(k in 1:nrow(game_data)){
A[game_data$h_ID[k],
game_data$a_ID[k]] <- game_data[k,stat_idx]
A[game_data$a_ID[k],
game_data$h_ID[k]] <- game_data[k,stat_idx+1]
}
R <- softImpute(A, rank.max=rank, maxit=1e3)
R <- softImpute(A, rank.max=rank, maxit=1e3)
rank
rank <- 1
R <- softImpute(A, rank.max=rank, maxit=1e3)
R$u
R$u*R$d*t(R$v)
size()
dim(R$u*R$d*t(R$v))
dim(R$u%*%R$d%*%t(R$v))
dim(R$u)
R$u
length(R$u)
matrix(R$u)
matrix(R$u)%*%matrix(R$d)%*%t(matrix(R$v))
runApp()
game_data <- subset(boxscores, season_year %in% c(year) & season_type %in% c('Regular'))
A <- matrix(NA,length(team_ids),length(team_ids))
idx <- match(stat, names(map))
stat_idx <- match(map[idx], names(game_data))
for(k in 1:nrow(game_data)){
A[game_data$h_ID[k],
game_data$a_ID[k]] <- game_data[k,stat_idx]
A[game_data$a_ID[k],
game_data$h_ID[k]] <- game_data[k,stat_idx+1]
}
R <- softImpute(A, rank.max=rank, maxit=1e3)
## pageRank
d <- R$d
R <- matrix(R$u)%*%matrix(R$d)%*%t(matrix(R$v))
R
P <- sweep(R, 2, colSums(R), FUN="/")
r <- svd(P, nu=0, nv=1)$v
r
P
rank <- 2
R <- softImpute(A, rank.max=rank, maxit=1e3)
## pageRank
d <- R$d
R <- matrix(R$u)%*%matrix(R$d)%*%t(matrix(R$v))
P <- sweep(R, 2, colSums(R), FUN="/")
r <- svd(P, nu=0, nv=1)$v
dim(R$u)
dim(matrix(R$u))
?matrix
dim(as.matrix(R$u))
R <- softImpute(A, rank.max=rank, maxit=1e3)
## pageRank
d <- R$d
R <- as.matrix(R$u)%*%as.matrix(R$d)%*%t(as.matrix(R$v))
P <- sweep(R, 2, colSums(R), FUN="/")
r <- svd(P, nu=0, nv=1)$v
dim(as.matrix(R$d))
R$d
diag(2,2)
R <- softImpute(A, rank.max=rank, maxit=1e3)
## pageRank
d <- R$d
R <- as.matrix(R$u)%*%as.matrix(diag(R$d))%*%t(as.matrix(R$v))
P <- sweep(R, 2, colSums(R), FUN="/")
r <- svd(P, nu=0, nv=1)$v
r
rank <- 4
R <- softImpute(A, rank.max=rank, maxit=1e3)
## pageRank
d <- R$d
R <- as.matrix(R$u)%*%as.matrix(diag(R$d))%*%t(as.matrix(R$v))
P <- sweep(R, 2, colSums(R), FUN="/")
r <- svd(P, nu=0, nv=1)$v
r
runApp()
runApp()
runApp()
rm(list=ls(all=TRUE))
stat <- 'Score'
year <- 2013
R <- ranker(stat, year, 1)
## functions for working with the NFL dataset
library('softImpute')
boxscores <- readRDS("Data/boxscores.rds")
team_ids <- unique(boxscores$home_team)
boxscores$h_ID <- match(boxscores$home_team,team_ids)
boxscores$a_ID <- match(boxscores$away_team,team_ids)
map <- list(Score = 'home_score',
Pass_yds_att = 'hpyatt',
TDs = 'home_tds',
FGs = 'home_fgs',
Defense_Ffum = 'home_defense_ffum',
Rushing_yds = 'home_rushing_yds',
Defense_int = 'home_defense_int',
Sacks = 'home_defense_sk')
ranker <- function(stat, year, rank){
game_data <- subset(boxscores, season_year %in% c(year) & season_type %in% c('Regular'))
A <- matrix(NA,length(team_ids),length(team_ids))
idx <- match(stat, names(map))
stat_idx <- match(map[idx], names(game_data))
for(k in 1:nrow(game_data)){
A[game_data$h_ID[k],
game_data$a_ID[k]] <- game_data[k,stat_idx]
A[game_data$a_ID[k],
game_data$h_ID[k]] <- game_data[k,stat_idx+1]
}
R <- softImpute(A, rank.max=rank, maxit=1e3)
return(R)
}
R <- ranker(stat, year ,2)
as.matrix(R$u)%*%as.matrix(diag(R$d))%*%t(as.matrix(R$v))
F <- as.matrix(R$u)%*%as.matrix(diag(R$d))%*%t(as.matrix(R$v))
one <- as.matrix(R$u[,1])%*%as.matrix(R$d[1])%*%t(as.matrix(R$v[,1]))
two <- as.matrix(R$u[,2])%*%as.matrix(R$d[2])%*%t(as.matrix(R$v[,2]))
one
F
two
rowSums(one)
rowSums(two)
rowSums(one)/32
rowSums(two)/32
colSums(two)/32
runApp()
runApp()
runApp()
runApp()
runApp()
?ncol
?svd
runApp()
runApp()
stat <- 'Score'
year <- 2013
rank <- 2
game_data <- subset(boxscores, season_year %in% c(year) & season_type %in% c('Regular'))
A <- matrix(NA,length(team_ids),length(team_ids))
idx <- match(stat, names(map))
stat_idx <- match(map[idx], names(game_data))
for(k in 1:nrow(game_data)){
A[game_data$h_ID[k],
game_data$a_ID[k]] <- game_data[k,stat_idx]
A[game_data$a_ID[k],
game_data$h_ID[k]] <- game_data[k,stat_idx+1]
}
R <- softImpute(A, rank.max=rank, maxit=1e3)
R$u
as.matrix(R$u[,2])
diag(R$d[2])
R$d
diag(R$d[2])
as.matrix(diag(R$d[2]))
?diag
runApp()
runApp()
runApp()
library(neuralnet)
install.packages(neuralnet)
install.packages('neuralnet')
library(neuralnet)
?nn
?neuralnet
?softImpute
runApp()
runApp()
runApp()
R
R$u
R$u[c(1,2,3),c(1,2,1,2)]
runApp()
runApp()
runApp()
